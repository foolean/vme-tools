# FILENAME:     vme-common
#
# DESCRIPTION:
#   vme-common contains common functions and variables
#   used by the scripts in the vme-tools suite.
#
###############################################################################

# VME Variables
#------------------------------------------------------------------------------

# The rest of the VME paths (for convenience)
VMEETC=$(readlink -f "${VMEBIN}/../etc")

# Load common functions and variables
. "${VMEETC}/vme.cfg"

#
# You should be safe to leave the rest alone
#


# Commands that we will be using
PDSH=$(which pdsh)
NODEATTR=$(which nodeattr)
VIRSH=$(which virsh)
VNCVIEWER=$(which vncviewer)
LOGGER=$(which logger)
LOGGER="${LOGGER} -i -t ${MYNAME}"

# Log what we're doing
${LOGGER} "vme-tools: ${USER}(${SUDO_USER}): ${MYNAME} $*"

# VME Functions
#------------------------------------------------------------------------------

# is_valid_gender:
#   Check if a pdsh(1) gender is defined.
#
#   Returns:
#   0   - gender is not valid
#   1   - gender is valid
is_valid_gender() {
    local GENDER="$1"
    local IS_VALID=0

    if [ "${PDSH}" == "" ] || [ "${GENDER}" == "" ]
    then
        # if the gender we're validating is blank or
        # pdsh(1) can't found then the validity is
        # irrelevant so we'll just return 'true'.
        IS_VALID=1
    else
        if [ "${NODEATTR}" != "" ]
        then
            # we have nodeattr(1) so we'll use that to validate the gender
            TEST=$("${NODEATTR}" -c "${GENDER}")
            if [ "${TEST}" != "" ]
            then
                IS_VALID=1;     # Gender exists, return 'true'
            fi
        else
            # nodeattr(1) not found so we can't tell if the gender is valid.
            
            # This should be enhanced to perhaps use other means to validate
            # the gender.  For now, we'll just assume 'true'.
            IS_VALID=1
        fi
    fi

    echo ${IS_VALID}
}

# is_remote_virt_store:
#   Check if the virt-store is locally or remotely mounted
#
#   Returns:
#   0   - virt store is locally mounted
#   1   - virt store is remotely mounted
is_remote_virt_store() {
    local SERVER="${1}" 
    if [ "${SERVER}" != "" ] && [ "${SERVER}" != "$(hostname -s)" ]
    then
        VIRT_STORE_MOUNT_TYPE=$(ssh "${SERVER}" "df -PT \"${VIRT_STORE}\"" | \
            tail -n1 | awk '{print $2}')
    else
        VIRT_STORE_MOUNT_TYPE=$(df -PT "${VIRT_STORE}" | tail -n1 | awk '{print $2}')
    fi

    case "${VIRT_STORE_MOUNT_TYPE}" in
        fuse.*|nfs*)
            echo "1";   # virt-store is remotely mounted
            ;;
        *)
            echo "0";   # virt-store is locallly mounted
            ;;
    esac
}

# list_guests:
#   Routine that handles the listing of guests in the VME
list_guests() {

    if [ "${GENDER}" == "" ]
    then
        GENDER="${DEFAULT_GENDER}"
    fi

    if [ "${PDSH}" != "" ] && [ "${GENDER}" != "" ]
    then
        # Use pdsh(1) to get the list from the entire VME
        OUTPUT=$("${PDSH}" -g "${GENDER}" "virsh -qr list --all")
    else
        # Just run `virsh list --all` locally but format it with
        # the hostname just as if it was run using pdsh(1)
        OUTPUT=$("${VIRSH}" -qr list --all | \
                    awk -v hostname="$(hostname -s)" '{print hostname": "$0}')
    fi 
      
    # Print the header
    notice "Server           ID  Name                           State"
    notice "------------------------------------------------------------"

    # Parse and format the `virsh list --all` output
    echo "${OUTPUT}" | \
        awk '{
            sub(":","",$1); 
            printf "%-15s %3s  %-30s ", $1, $2, $3;
            print substr($0, index($0,$4));
        }' | sort
}

# get_img_file:
#   Get the image file of a guest.
get_img_file() {

    # Make sure we were passed an argument
    local GUEST="${1}"
    if [ "${GUEST}" == "" ]
    then
        echo ""
        return
    fi

    # Get the guest's image file
    "${VIRSH}" $(get_connect_method $(get_server "${GUEST}")) \
        domblklist "${GUEST}" --details | tail -n+3 | head -n1 | awk '{print $4}'
}

# get_img_store:
#   Get the image store of a guest.  This function will
#   validate that the guest is following the standard
#   directory structure of STORE/GUEST/IMGFILE.
#
#   Returns:
#   on success          - the guest's virt store path
#   on invalid store    - '' (blank)
#   on error            - '' (blank)
get_img_store() {

    # Make sure we were passed an argument
    local GUEST="${1}"
    if [ "${GUEST}" == "" ]
    then
        echo ""
        return
    fi

    # Get the guest's image file
    IMG_FILE=$(get_img_file "${GUEST}")
    if [ "${IMG_FILE}" == "" ]
    then
        error "Unable to determine image file for '${GUEST}'"
        echo ""
        return
    fi

    # Get the guest's image directory
    # (this is to make sure that it follows STORE/GUEST/GUEST.img)
    IMG_DIR=$(basename $(dirname "${IMG_FILE}"))
    if [ "${IMG_DIR}" != "${1}" ]
    then
        error "Image file in non-standard location: (${IMG_FILE})"
        echo ""
        return
    fi

    # Return the guest's virt-store
    echo $(dirname $(dirname "${IMG_FILE}"))
}

# get_mgmt_img_store
#   Get the image store path of a Hypervisor as it is mounted
#   on the management server.  The premise is that the management
#   will have mounted the shared storage of all Zones.
#
#   Returns:
#   on success      - the local virt store path
#   on error        - '' (blank)
get_mgmt_img_store() {

    local SERVER="${1}"
    if [ "${SERVER}" == "" ]
    then
        echo ""
        return
    fi

    # Use the default virt-store path if we weren't given one
    local SERVER_VIRT_STORE="${2}"
    if [ "${SERVER_VIRT_STORE}" == "" ]
    then
        SERVER_VIRT_STORE="${VIRT_STORE}"
    fi

    # If we are on the server then just return the "remote" virt-store path
    if [ "${SERVER}" == "$(hostname -s)" ]
    then
        echo "${SERVER_VIRT_STORE}"
        return
    fi

    # Get the remote export and file system type from the server
    SERVER_DF=$( ssh "${SERVER}" "df -PTh \"${SERVER_VIRT_STORE}\" | tail -n1")
    REMOTE_EXPORT=$(echo "${SERVER_DF}" | awk '{print $1}' | cut -f2 -d:)
    REMOTE_TYPE=$(echo "${SERVER_DF}" | awk '{print $2}')

    # Look for the same remote export mounted locally
    LOCAL_MOUNT=$(df -t "${REMOTE_TYPE}" -PTh | grep ":${REMOTE_EXPORT}" | awk '{print $7}')
    if [ "${LOCAL_MOUNT}" == "" ]
    then
        echo ""
        return
    fi
    MGMT_IMG_STORE="${LOCAL_MOUNT}/virt-store"

    # Return the local virt store
    echo "${MGMT_IMG_STORE}"
}

# get_last_drive
#   Return the name of the last virtual disk drive for a guest
#
#   Returns:
#   on success:     - the last drive in the list
#   on error:       - '' (blank)
get_last_drive() {

    # We must have been given a starting guest name
    local GUEST="${1}"
    if [ "${GUEST}" == "" ]
    then
        return
    fi

    # Find the server the guest is on
    SERVER=$(get_server "${GUEST}")
    if [ "${SERVER}" == "" ]
    then
        fatal "Unable to info '${GUEST}', guest not found"
        exit 1; # should never get here
    fi

    # Get the connection method for the server the guest is on
    CONNECT=$(get_connect_method "${SERVER}")

    # Get the guest's last disk drive
    "${VIRSH}" ${CONNECT} domblklist "${GUEST}" --details | \
        awk '{if($2=="disk"){print $3}}' | sort | tail -n 1
}

# get_next_drive
#   Returns the next drive name (e.g. in=vda, out=vdb)
#
#   Returns:
#   on success:     - the next drive name
#   on error:       - '' (blank)
#
#   Note: get_next_drive will return '' after the last
#         drive letter 'z' has been reached.
get_next_drive() {

    # We must have been given a starting guest name
    local GUEST="${1}"
    if [ "${GUEST}" == "" ]
    then
        return
    fi

    # We must be able to determine the last drive
    local DRIVE_NAME=$(get_last_drive "${GUEST}")
    if [ "${DRIVE_NAME}" == "" ]
    then
        return
    fi

    # Get the position of the drive letter
    local DRIVE_LETTER_POS=$((${#DRIVE_NAME}-1))

    # Get the drive letter
    local DRIVE_LETTER=${DRIVE_NAME:${DRIVE_LETTER_POS}:1}

    # Get the everything but the drive letter
    local DRIVE_NAME_BASE=${DRIVE_NAME:0:${DRIVE_LETTER_POS}}

    # Increment the drive letter
    local DRIVE_LETTER_NEXT=$(echo "${DRIVE_LETTER}" | tr "0-9a-z" "1-9a-z")

    # If the next drive letter is the same as the current one
    # then we've reached the end of the line.
    if [ "${DRIVE_LETTER}" == "${DRIVE_LETTER_NEXT}" ]
    then
        return
    fi

    # Assemble the new drive name
    local DRIVE_NAME_NEXT="${DRIVE_NAME_BASE}${DRIVE_LETTER_NEXT}"

    # ... and return it
    echo "${DRIVE_NAME_NEXT}"
}

# get_server:
#   returns the server that the guest is on
#
#   Returns:
#   on valid guest      - the server the guest is on
#   on invalid guest    - '' (blank)
#   on error            - '' (blank)
get_server() {

    local GUEST="${1}"
    if [ "${GUEST}" == "" ]
    then
        echo ""
    else
        list_guests | awk -v guest="${GUEST}" '($3==guest) {print $1}'
    fi
}

# get_connect_method:
#   returns the connection string for a remote host or
#   '' (blank) if we're connecting to the local system
get_connect_method() {

    local SERVER="${1}"
    if [ "${SERVER}" != "$(hostname -s)" ]
    then
        echo "--connect=qemu+ssh://${SERVER}/system"
    else
        echo ""
    fi
}

# set_guest_perms
#   Set the proper ownership and permission on a guest's
#   virtual disk images.
set_guest_perms() {

    # We must have been given a guest
    local GUEST="${1}"
    if [ "${GUEST}" == "" ]
    then
        return
    fi

    # We must be able to find the server
    local SERVER=$(get_server "${GUEST}")
    if [ "${SERVER}" == "" ]
    then
        return
    fi

    # Generate the command to chown/chmod the guest's disks
    COMMAND="virsh domblklist \"${GUEST}\" --details          | \
        grep \"file.*disk\" | awk '{print \$4}'               | \
        while read DISK;                                        \
        do                                                      \
            chown \"${KVM_USER}.${KVM_GROUP}\" \"\${DISK}\";    \
            chmod \"${KVM_MODE}\" \"\${DISK}\";                 \
        done"

    # Perform the chown/chmod
    if [ "${SERVER}" != "$(hostname -s)" ]
    then
        ssh "${SERVER}" "${COMMAND}"
    else
        ${COMMAND}
    fi
}

# archive_guest
#   tar and encrypt a guest and upload it to an archive location.
#   this is essentially a last-ditch backup and forensic copy.    
archive_guest() {
    local GUEST_PATH="$1"
    local GUEST="$2"
    local DATESTAMP=$(date +%Y%m%d%H%M)

    if [ "${GUEST}" == "" ] || [ "${GUEST_PATH}" == "" ]
    then
        echo ""
        return
    fi

    # Assemble the GPG recipient list
    GPG_RECIPIENTS=""
    for GPG_RECIPIENT in ${GPG_RECIPIENT_KEYS}
    do  
        GPG_RECIPIENTS="${GPG_RECIPIENTS} -r ${GPG_RECIPIENT}"
    done

    # Tar, encrypt, and ssh the guest over to the archive host
    tar -C "${GUEST_PATH}"                      \
        --atime-preserve -cvf - "${GUEST}"    | \
        gpg --trust-model "always"              \
            --cipher-algo "${GPG_CIPHER_ALGO}"  \
            --homedir     "/root/.gnupg"        \
            --encrypt     ${GPG_RECIPIENTS}   | \
        ssh -i "${ARCHIVE_KEY}"                 \
            -p "${ARCHIVE_PORT}"                \
            "${ARCHIVE_USER}"@"${ARCHIVE_HOST}" \
        "${ARCHIVE_CMD} ${ARCHIVE_PATH}/${GUEST}-${DATESTAMP}.tar.gpg"
}

# humanize:
#   returns the humanized version of a number.
humanize() {
    if [ "$1" == "" ]
    then
        return
    fi

    echo "$1" | awk '{
        sum = $1;
        neg = 0;
        if ( sum < 0 ) {
            sum *= -1;
            neg = 1;
        }
        hum[1024**5] = "PB";
        hum[1024**4] = "TB";
        hum[1024**3] = "GB";
        hum[1024**2] = "MB";
        hum[1024]    = "KB";

        for ( x=1024**3; x>=1024; x/=1024 ) {
            if ( sum >= x ) {
                if ( neg == 1 ) {
                    printf "-%.2f %s\n", (sum/x), hum[x];
                } else {
                    printf "%.2f %s\n", (sum/x), hum[x];
                }
                break;
            }
        }
    }'
}

# debug:
#   Simple routine to output debugging output
debug() {
    if [ ${DEBUG} -eq 1 ]; then
        echo "debug: $*" 1>&2
    fi
}

# error:
#   Simple routine to print error messages
error() {
    echo "error: $*" 1>&2
}

# fatal:
#   Simple routine to print error messages and exit
fatal() {
    echo "fatal: $*" 1>&2
    exit 1
}

# notice:
#   Simple routine to handle general output
notice() {
    if [ ${QUIET} -eq 0 ]; then
        echo "$*"
    fi
}
