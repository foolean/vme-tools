#!/bin/bash
#
# FILENAME:     start_guest
# AUTHOR:       Bennett Samowich <bennett@foolean.org>
# DATE:         2016-04-21
#
# DESCRIPTION:
#   start_guest is a simple script to handle the starting of KVM guests
#   in an environment with multiple Hypervisors.  This script relies on
#   the 'list_guests' script to handle searching for the guest within
#   the environment.
#
###############################################################################

# Find out where in the world we are
VMEBIN=$(readlink -f $(dirname $0))
MYNAME=$(basename $0)

# Load common functions and variables
. "${VMEBIN}/vme-common"

# Basic usage/help function
usage() {
    echo "usage: ${MYNAME} [-q] guest"
    echo "where:"
    echo "  -h      - Print this message"
    echo "  -q      - Suppress notification messages"
    exit 1
}

# Parse the command-line options
while getopts "hq" OPTION
do
    case $OPTION in
        D)
            DEBUG=1
            ;;
        h)  
            usage
            exit 1;     # should never get here
            ;;
        q)  
            QUIET=1
            ;;
        ?)  
            echo "Unknown argument, exiting"
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

# we must have been given a guest name
GUEST=$1
if [ "${GUEST}" == "" ]
then
    usage
    exit 1
fi

# Find the server the guest is on
SERVER=$(get_server "${GUEST}")
if [ "${SERVER}" == "" ]
then
    fatal "Unable to start '${GUEST}', guest not found"
    exit 1; # should never get here
fi

# Get the VNC display number
VNCDISPLAY=$("${VIRSH}" $(get_connect_method "${SERVER}") vncdisplay "${GUEST}")
if [ "${VNCDISPLAY}" == "" ]
then
    echo "Unable to open console to '${GUEST}', VNC display not found"
    exit 1
fi

# Determine if we can connect remotely or need to ssh in
if [[ "${VNCDISPLAY}" =~ 127.0.0.1:* ]]
then
    # Guest's console is listening to localhost

    notice "Connecting to '${GUEST}' on '${SERVER}'"
    if [ "${SERVER}" == "$(hostname -s)" ]
    then
        # The guest is on this system...
        "${VNCVIEWER}" "${VNCDISPLAY}" 2>/dev/null &
    else
        # The guest is on a remote system...
        # We'll ssh into the remote hypervisor and run vncdisplay
        # from there.  The only issue is that we really won't know
        # if vncviewer is actually there.
        ssh "${SERVER}" "vncviewer ${VNCDISPLAY}" 2>/dev/null &
    fi
else
    # Guest's console is listening to all networks

    # Connect to the guest's console with VNC
    notice "Connecting to '${GUEST}' on '${SERVER}${VNCDISPLAY}'"
    "${VNCVIEWER}" "${SERVER}${VNCDISPLAY}" 2>/dev/null &
fi
