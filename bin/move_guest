#!/bin/bash
#
# FILENAME:     move_guest
# AUTHOR:       Bennett Samowich <bennett@foolean.org>
# DATE:         2016-04-21
#
# DESCRIPTION:
#   move_guest is a simple script to handle the moving of KVM guests
#   between zones in an environment with multiple Hypervisors.  This
#   script relies on the 'list_guests' script to handle searching for
#   the guest within the environment.
#
###############################################################################

# Find out where in the world we are
VMEBIN=$(readlink -f $(dirname $0))
MYNAME=$(basename $0)

# Load common functions and variables
. "${VMEBIN}/vme-common"

# Basic usage/help function
usage() {
    echo "usage: ${MYNAME} [-cDqs] guest dest-server"
    echo "  -c      - connect to the guest's console after moving (implies -s)"
    echo "  -D      - turn on debugging output"
    echo "  -h      - print this message"
    echo "  -q      - suppress notfication output"
    echo "  -s      - start the guest on the destination server"
    exit 1
}

# Start the guest after moving
START=0
CONNECT=0

# Parse the command-line options
while getopts "cDhqs" OPTION
do
    case $OPTION in
        c)
            CONNECT=1
            START=1
            ;;
        D)
            DEBUG=1
            ;;
        h)  
            usage
            exit 1;     # should never get here
            ;;
        q)  
            QUIET=1
            ;;
        s)
            START=1
            ;;
        ?)  
            echo "Unknown argument, exiting"
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

# we must have been given a guest name and destination server
GUEST=$1
DST_SERVER=$2
if [ "${GUEST}" == "" ] || [ "${DST_SERVER}" == "" ]
then
    usage
    exit 1; # should never get here
fi

# Find the server the guest is on
SRC_SERVER=$(get_server "${GUEST}")
if [ "${SRC_SERVER}" == "" ]
then
    fatal "Unable to delete '${GUEST}', guest not found"
    exit 1; # should never get here
fi

# Get the source and destination image stores
SRC_IMG_STORE=$(get_mgmt_img_store "${SRC_SERVER}")
SRC_IMG_PATH="${SRC_IMG_STORE}/${GUEST}"
DST_IMG_STORE=$(get_mgmt_img_store "${DST_SERVER}")
DST_IMG_PATH="${DST_IMG_STORE}/${GUEST}"

if [ "${SRC_IMG_STORE}" == "${DST_IMG_STORE}" ]
then
    fatal "source and destination are identical, use migrate_guest instead"
fi
debug "SRC_IMG_STORE = '${SRC_IMG_STORE}'"
debug "DST_IMG_STORE = '${DST_IMG_STORE}'"

# Move the guest
notice "Moving '${GUEST}' from '${SRC_SERVER}' to '${DST_SERVER}'"

# Stop the guest
"${VMEBIN}/stop_guest" "${GUEST}"

# Get the connection method for the source server
SRC_CONNECT=$(get_connect_method "${SRC_SERVER}")
DST_CONNECT=$(get_connect_method "${DST_SERVER}")

# Save the XML
notice "Saving the XML configuration for '${GUEST}'"
"${VIRSH}" ${SRC_CONNECT} dumpxml --migratable "${GUEST}" \
    > "${SRC_IMG_PATH}/${GUEST}.xml"

# Get the current snapshot
CURRENT=$("${VIRSH}" $(get_connect_method "${SRC_SERVER}") snapshot-current "${GUEST}" --name)

# Save and delete the metadata for the snapshots
"${VIRSH}" $(get_connect_method "${SRC_SERVER}") snapshot-list "${GUEST}" --tree |\
    sed -e 's/^.*|//g' -e 's/^.*+- //' -e '/^\s*$/d' | sort -r | \
    while read SNAP
    do
        notice "Saving metadata for snapshot '${SNAP}' to XML"
        "${VIRSH}" $(get_connect_method "${SRC_SERVER}") snapshot-dumpxml "${GUEST}" --snapshotname "${SNAP}" --security-info > "${SRC_IMG_PATH}/snapshot_${GUEST}_$(date +%Y%m%d%H%M%S).xml"

        notice "Deleting metadata for snapshot '${SNAP}' from '${GUEST}'"
        "${VIRSH}" $(get_connect_method "${SRC_SERVER}") snapshot-delete "${GUEST}" --snapshotname "${SNAP}" --metadata

        sleep 1
    done

# Undefine the guest from the source server
notice "Undefining '${GUEST}' from '${SRC_SERVER}'"
"${VIRSH}" ${SRC_CONNECT} undefine "${GUEST}"

# Copy the image
notice "Moving '${SRC_IMG_PATH}' to '${DST_IMG_PATH}'"
mv "${SRC_IMG_PATH}" "${DST_IMG_PATH}"

# Define the guest on the destination server
notice "Defining '${GUEST}' on '${DST_SERVER}'"
"${VIRSH}" ${DST_CONNECT} define "${DST_IMG_PATH}/${GUEST}.xml"

# Restore the metadata for the snapshots
for SNAP_XML in $(ls "${DST_IMG_PATH}/snapshot_${GUEST}_"*".xml" | sort -r)
do
    notice "Redefining snapshot '${SNAP_XML}' for '${GUEST}' on '${DST_SERVER}'"
    "${VIRSH}" $(get_connect_method "${DST_SERVER}") snapshot-create "${GUEST}" "${SNAP_XML}" --redefine

    notice "Removing '${SNAP_XML}'"
    rm "${SNAP_XML}"
done

# Set the current snapshot
if [ "${CURRENT}" != "" ]
then
    "${VIRSH}" $(get_connect_method "${DST_SERVER}") snapshot-current "${GUEST}" "${CURRENT}"
fi

# Start the guest
if [ ${START} -eq 1 ]
then
    "${VMEBIN}/start_guest" "${GUEST}"
fi

# Connect to the guest
if [ ${CONNECT} -eq 1 ]
then
    "${VMEBIN}/console_guest" "${GUEST}"
fi

