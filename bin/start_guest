#!/bin/bash
#
# FILENAME:     start_guest
# AUTHOR:       Bennett Samowich <bennett@foolean.org>
# DATE:         2016-04-21
#
# DESCRIPTION:
#   start_guest is a simple script to handle the starting of KVM guests
#   in an environment with multiple Hypervisors.  This script relies on
#   the 'list_guests' script to handle searching for the guest within
#   the environment.
#
###############################################################################

# Find out where in the world we are
VMEBIN=$(readlink -f $(dirname $0))
MYNAME=$(basename $0)

# Load common functions and variables
. "${VMEBIN}/vme-common"

# Basic usage/help function
usage() {
    echo "usage: ${MYNAME} [-Cq] guest"
    echo "where:"
    echo "  -C      - Open a VNC console to the guest after starting"
    echo "  -h      - Print this message"
    echo "  -q      - Suppress notification messages"
    exit 1
}

# Flag to specify whether to console to the guest after starting
CONSOLE=0

# Parse the command-line options
while getopts "CDhq" OPTION
do
    case $OPTION in
        C)
            CONSOLE=1
            ;;
        D)
            DEBUG=1
            ;;
        h)  
            usage
            exit 1;     # should never get here
            ;;
        q)  
            QUIET=1
            ;;
        ?)  
            echo "Unknown argument, exiting"
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

# we must have been given a guest name
GUEST=$1
if [ "${GUEST}" == "" ]
then
    usage
    exit 1
fi

# Find the server the guest is on
SERVER=$(get_server "${GUEST}")
if [ "${SERVER}" == "" ]
then
    fatal "Unable to start '${GUEST}', guest not found"
    exit 1; # should never get here
fi

# Start the guest
notice "Starting '${GUEST}' on '${SERVER}'"
"${VIRSH}" $(get_connect_method "${SERVER}") start "${GUEST}"

# Open a VNC console to the guest
if [ ${CONSOLE} -eq 1 ]
then
    "${VMEBIN}/console_guest" "${GUEST}"
fi

